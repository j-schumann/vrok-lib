<?php
// Twitter Bootstrap 3 compatible markup

$type = $element->getAttribute('type');
$containerId = 'container-'.$element->getAttribute('id');

$containerClasses = [];
if ($type === 'checkbox') {
    $containerClasses[] = 'input-group checkbox';
} else {
    $containerClasses[] = 'form-group';
}
if (count($element->getMessages())) {
    $containerClasses[] = 'has-error';
}

// for twitter bootstrap:
if ($type === 'radio') {
    $containerClasses[] = 'radio';
}

$containerOpen = '<div class="'.implode(' ', $containerClasses).'" id="'.$containerId.'">';
$containerClose = '</div>';

$labelOpen = '';
$labelClose = '';
$labelContent = '';

// we don't rely on getLabel() here as this only returns strings. If we set the
// label via setOptions() as an array containing the translation string and the
// parameters it is still in the options but not set as label
$label = $this->element->getLabel() ?: $this->element->getOption('label');

if ($label && $this->element->getAttribute('type') !== 'hidden') {
    $labelAttributes = $this->element->getLabelAttributes();
    $labelClasses = ['control-label'];

    $required = $this->element->getAttribute('required');
    if ($required === 'required' && empty($labelAttributes['class'])) {
        $labelClasses[] = 'required';
    }
    if (isset($labelAttributes['class'])) {
        $labelClasses[] = $labelAttributes['class'];
    }
    if (count($element->getMessages())) {
        $labelClasses[] = 'error';
    }
    $labelAttributes['class'] = implode(' ', $labelClasses);
    $labelAttributes['for'] = $this->element->getAttribute('id');

    if ($type === 'multi_checkbox' || $type === 'radio') {
        $labelOpen = '<legend '.$this->formLabel()->createAttributesString($labelAttributes).'>';
    } else {
        $labelOpen = '<label '.$this->formLabel()->createAttributesString($labelAttributes).'>';
    }

    if ($type === 'multi_checkbox' || $type === 'radio') {
        $labelClose = '</legend>';
    } else {
        $labelClose = '</label>';
    }

    $labelContent = $this->translate($label);
}

$descriptionMarkup = '';
$description = $this->element->getOption('description');
if ($description) {
    $descriptionMarkup = '<span class="help-block">'.$this->translate($description).'</span>';
}

if ($element instanceof \Vrok\Form\ElementInterface) {
    $eh = $this->plugin($element->suggestViewHelper());
}
else {
    $eh = $this->plugin('FormElement');
}

$elementClasses = [$this->element->getAttribute('class')];
if ($type !== 'checkbox' && $type !== 'file' && $type !== 'radio') {
    $elementClasses[] = 'form-control';
}
if ($type === 'submit') {
   $elementClasses[] = 'btn btn-primary';
}

$this->element->setAttribute('class', implode(' ', $elementClasses));
$elementMarkup = $eh($this->element);

$errorMarkup = '';
if (count($element->getMessages())) {
    $errorMarkup = $this->formElementErrors()->render($element, ['class' => 'errors help-block']);
}

if ($type === 'checkbox') {
    echo $containerOpen
            .$labelOpen
                .$elementMarkup
                .$labelContent
            .$labelClose
            .$errorMarkup
            .$descriptionMarkup
        .$containerClose;
} elseif ($type === 'submit') {
    echo $containerOpen
            .$labelOpen
                .$labelContent
            .$labelClose
            .$elementMarkup
            .$descriptionMarkup
            .$errorMarkup
        .$containerClose;
} else {
    echo $containerOpen
            .$labelOpen
                .$labelContent
            .$labelClose
            .$elementMarkup
            .$errorMarkup
            .$descriptionMarkup
        .$containerClose;
}
