<?php
/**
 * @copyright   (c) 2014, Vrok
 * @license     http://customlicense CustomLicense
 * @author      Jakob Schumann <schumann@vrok.de>
 */

namespace Vrok\Form;

use Doctrine\Common\Persistence\ObjectManager;
use Zend\ServiceManager\ServiceLocatorAwareTrait;

/**
 * Used to extend our fieldset and form classes by this functions because they
 * can not inherit from the same base.
 */
trait SharedFunctions
{
    use ServiceLocatorAwareTrait;

    /**
     * Adds a CSRF protection element to the form.
     * Injects the default translator or else the error message is not translated because
     * Zend\Form\Element\Csrf does not add a translator to the validator by default.
     *
     * @param string $name
     * @param int $timeout
     * @return self
     */
    public function addCsrfElement($name, $timeout = 600)
    {
        return $this->add(array(
            'type'    => 'Zend\Form\Element\Csrf',
            'name'    => $name,
            'options' => array(
                'csrf_options' => array(
                    'timeout' => $timeout,
                    'messages' => array(
                        \Zend\Validator\Csrf::NOT_SAME => 'validate.form.csrfInvalid',
                    ),
                    'translator' => $this->getServiceLocator()->getServiceLocator()
                        ->get('translator'),
                ),
            ),
        ));
    }

    /**
     * Translates the messages before setting.
     * This is necessary because the validators generated by the InputFilter from
     * the filterSpecification return translated messages already so the views errorHelper
     * does not translate them again.
     * We don't want to extend the errorHelper to translate everything he recieves as this
     * is expensive.
     *
     * @param array $messages
     */
    public function setUntranslatedMessages($messages) {
        $translator = $this->getServiceLocator()->getServiceLocator()->get('translator');
        foreach($messages as &$messageSet) {
            foreach ($messageSet as &$message) {
                $message = $translator->translate($message);
            }
        }

        $this->setMessages($messages);
    }

    /**
     * Sets a single error message for the given element.
     *
     * @param string $element
     * @param string $message
     */
    public function setElementMessage($element, $message)
    {
        $translator = $this->getServiceLocator()->getServiceLocator()->get('translator');
        $this->get($element)->setMessages(array($translator->translate($message)));
    }

    /**
     * Retrieve the entity manager.
     *
     * @return ObjectManager
     */
    public function getEntityManager()
    {
        return $this->getServiceLocator() // returns the FormElementManager
            ->getServiceLocator() // returns the ServiceManager
            ->get('Doctrine\ORM\EntityManager');
    }
}
